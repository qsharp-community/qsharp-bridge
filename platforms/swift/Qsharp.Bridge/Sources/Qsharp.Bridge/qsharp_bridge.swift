// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(qsharp_bridgeFFI)
import qsharp_bridgeFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_qsharp_bridge_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_qsharp_bridge_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol ExecutionOptionsProtocol : AnyObject {
    
}

open class ExecutionOptions:
    ExecutionOptionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_qsharp_bridge_fn_clone_executionoptions(self.pointer, $0) }
    }
public convenience init(shots: UInt32, noise: PauliDistribution) {
    let pointer =
        try! rustCall() {
    uniffi_qsharp_bridge_fn_constructor_executionoptions_new(
        FfiConverterUInt32.lower(shots),
        FfiConverterTypePauliDistribution.lower(noise),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_qsharp_bridge_fn_free_executionoptions(pointer, $0) }
    }

    
public static func fromNoise(noise: PauliDistribution) -> ExecutionOptions {
    return try!  FfiConverterTypeExecutionOptions.lift(try! rustCall() {
    uniffi_qsharp_bridge_fn_constructor_executionoptions_from_noise(
        FfiConverterTypePauliDistribution.lower(noise),$0
    )
})
}
    
public static func fromShots(shots: UInt32) -> ExecutionOptions {
    return try!  FfiConverterTypeExecutionOptions.lift(try! rustCall() {
    uniffi_qsharp_bridge_fn_constructor_executionoptions_from_shots(
        FfiConverterUInt32.lower(shots),$0
    )
})
}
    

    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExecutionOptions: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ExecutionOptions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ExecutionOptions {
        return ExecutionOptions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ExecutionOptions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExecutionOptions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ExecutionOptions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExecutionOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> ExecutionOptions {
    return try FfiConverterTypeExecutionOptions.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExecutionOptions_lower(_ value: ExecutionOptions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeExecutionOptions.lower(value)
}


public struct Circuit {
    public var operations: [Operation]
    public var qubits: [Qubit]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(operations: [Operation], qubits: [Qubit]) {
        self.operations = operations
        self.qubits = qubits
    }
}



extension Circuit: Equatable, Hashable {
    public static func ==(lhs: Circuit, rhs: Circuit) -> Bool {
        if lhs.operations != rhs.operations {
            return false
        }
        if lhs.qubits != rhs.qubits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(operations)
        hasher.combine(qubits)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCircuit: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Circuit {
        return
            try Circuit(
                operations: FfiConverterSequenceTypeOperation.read(from: &buf), 
                qubits: FfiConverterSequenceTypeQubit.read(from: &buf)
        )
    }

    public static func write(_ value: Circuit, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeOperation.write(value.operations, into: &buf)
        FfiConverterSequenceTypeQubit.write(value.qubits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircuit_lift(_ buf: RustBuffer) throws -> Circuit {
    return try FfiConverterTypeCircuit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircuit_lower(_ value: Circuit) -> RustBuffer {
    return FfiConverterTypeCircuit.lower(value)
}


public struct ExecutionState {
    public var states: [QubitState]
    public var qubitCount: UInt64
    public var messages: [String]
    public var result: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(states: [QubitState], qubitCount: UInt64, messages: [String], result: String?) {
        self.states = states
        self.qubitCount = qubitCount
        self.messages = messages
        self.result = result
    }
}



extension ExecutionState: Equatable, Hashable {
    public static func ==(lhs: ExecutionState, rhs: ExecutionState) -> Bool {
        if lhs.states != rhs.states {
            return false
        }
        if lhs.qubitCount != rhs.qubitCount {
            return false
        }
        if lhs.messages != rhs.messages {
            return false
        }
        if lhs.result != rhs.result {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(states)
        hasher.combine(qubitCount)
        hasher.combine(messages)
        hasher.combine(result)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExecutionState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExecutionState {
        return
            try ExecutionState(
                states: FfiConverterSequenceTypeQubitState.read(from: &buf), 
                qubitCount: FfiConverterUInt64.read(from: &buf), 
                messages: FfiConverterSequenceString.read(from: &buf), 
                result: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ExecutionState, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeQubitState.write(value.states, into: &buf)
        FfiConverterUInt64.write(value.qubitCount, into: &buf)
        FfiConverterSequenceString.write(value.messages, into: &buf)
        FfiConverterOptionString.write(value.result, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExecutionState_lift(_ buf: RustBuffer) throws -> ExecutionState {
    return try FfiConverterTypeExecutionState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExecutionState_lower(_ value: ExecutionState) -> RustBuffer {
    return FfiConverterTypeExecutionState.lower(value)
}


public struct Operation {
    public var gate: String
    public var displayArgs: String?
    public var isControlled: Bool
    public var isAdjoint: Bool
    public var isMeasurement: Bool
    public var controls: [Register]
    public var targets: [Register]
    public var children: [Operation]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(gate: String, displayArgs: String?, isControlled: Bool, isAdjoint: Bool, isMeasurement: Bool, controls: [Register], targets: [Register], children: [Operation]) {
        self.gate = gate
        self.displayArgs = displayArgs
        self.isControlled = isControlled
        self.isAdjoint = isAdjoint
        self.isMeasurement = isMeasurement
        self.controls = controls
        self.targets = targets
        self.children = children
    }
}



extension Operation: Equatable, Hashable {
    public static func ==(lhs: Operation, rhs: Operation) -> Bool {
        if lhs.gate != rhs.gate {
            return false
        }
        if lhs.displayArgs != rhs.displayArgs {
            return false
        }
        if lhs.isControlled != rhs.isControlled {
            return false
        }
        if lhs.isAdjoint != rhs.isAdjoint {
            return false
        }
        if lhs.isMeasurement != rhs.isMeasurement {
            return false
        }
        if lhs.controls != rhs.controls {
            return false
        }
        if lhs.targets != rhs.targets {
            return false
        }
        if lhs.children != rhs.children {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(gate)
        hasher.combine(displayArgs)
        hasher.combine(isControlled)
        hasher.combine(isAdjoint)
        hasher.combine(isMeasurement)
        hasher.combine(controls)
        hasher.combine(targets)
        hasher.combine(children)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOperation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Operation {
        return
            try Operation(
                gate: FfiConverterString.read(from: &buf), 
                displayArgs: FfiConverterOptionString.read(from: &buf), 
                isControlled: FfiConverterBool.read(from: &buf), 
                isAdjoint: FfiConverterBool.read(from: &buf), 
                isMeasurement: FfiConverterBool.read(from: &buf), 
                controls: FfiConverterSequenceTypeRegister.read(from: &buf), 
                targets: FfiConverterSequenceTypeRegister.read(from: &buf), 
                children: FfiConverterSequenceTypeOperation.read(from: &buf)
        )
    }

    public static func write(_ value: Operation, into buf: inout [UInt8]) {
        FfiConverterString.write(value.gate, into: &buf)
        FfiConverterOptionString.write(value.displayArgs, into: &buf)
        FfiConverterBool.write(value.isControlled, into: &buf)
        FfiConverterBool.write(value.isAdjoint, into: &buf)
        FfiConverterBool.write(value.isMeasurement, into: &buf)
        FfiConverterSequenceTypeRegister.write(value.controls, into: &buf)
        FfiConverterSequenceTypeRegister.write(value.targets, into: &buf)
        FfiConverterSequenceTypeOperation.write(value.children, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOperation_lift(_ buf: RustBuffer) throws -> Operation {
    return try FfiConverterTypeOperation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOperation_lower(_ value: Operation) -> RustBuffer {
    return FfiConverterTypeOperation.lower(value)
}


public struct PauliDistribution {
    public var x: Double
    public var y: Double
    public var z: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(x: Double, y: Double, z: Double) {
        self.x = x
        self.y = y
        self.z = z
    }
}



extension PauliDistribution: Equatable, Hashable {
    public static func ==(lhs: PauliDistribution, rhs: PauliDistribution) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        if lhs.z != rhs.z {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
        hasher.combine(z)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePauliDistribution: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PauliDistribution {
        return
            try PauliDistribution(
                x: FfiConverterDouble.read(from: &buf), 
                y: FfiConverterDouble.read(from: &buf), 
                z: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: PauliDistribution, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.x, into: &buf)
        FfiConverterDouble.write(value.y, into: &buf)
        FfiConverterDouble.write(value.z, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePauliDistribution_lift(_ buf: RustBuffer) throws -> PauliDistribution {
    return try FfiConverterTypePauliDistribution.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePauliDistribution_lower(_ value: PauliDistribution) -> RustBuffer {
    return FfiConverterTypePauliDistribution.lower(value)
}


public struct QasmGenerationOptions {
    public var includeQelib: Bool
    public var resetBehavior: QasmResetBehavior

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(includeQelib: Bool, resetBehavior: QasmResetBehavior) {
        self.includeQelib = includeQelib
        self.resetBehavior = resetBehavior
    }
}



extension QasmGenerationOptions: Equatable, Hashable {
    public static func ==(lhs: QasmGenerationOptions, rhs: QasmGenerationOptions) -> Bool {
        if lhs.includeQelib != rhs.includeQelib {
            return false
        }
        if lhs.resetBehavior != rhs.resetBehavior {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(includeQelib)
        hasher.combine(resetBehavior)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQasmGenerationOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QasmGenerationOptions {
        return
            try QasmGenerationOptions(
                includeQelib: FfiConverterBool.read(from: &buf), 
                resetBehavior: FfiConverterTypeQasmResetBehavior.read(from: &buf)
        )
    }

    public static func write(_ value: QasmGenerationOptions, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.includeQelib, into: &buf)
        FfiConverterTypeQasmResetBehavior.write(value.resetBehavior, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQasmGenerationOptions_lift(_ buf: RustBuffer) throws -> QasmGenerationOptions {
    return try FfiConverterTypeQasmGenerationOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQasmGenerationOptions_lower(_ value: QasmGenerationOptions) -> RustBuffer {
    return FfiConverterTypeQasmGenerationOptions.lower(value)
}


public struct Qubit {
    public var id: UInt64
    public var numChildren: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, numChildren: UInt64) {
        self.id = id
        self.numChildren = numChildren
    }
}



extension Qubit: Equatable, Hashable {
    public static func ==(lhs: Qubit, rhs: Qubit) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.numChildren != rhs.numChildren {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(numChildren)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQubit: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Qubit {
        return
            try Qubit(
                id: FfiConverterUInt64.read(from: &buf), 
                numChildren: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Qubit, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.numChildren, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQubit_lift(_ buf: RustBuffer) throws -> Qubit {
    return try FfiConverterTypeQubit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQubit_lower(_ value: Qubit) -> RustBuffer {
    return FfiConverterTypeQubit.lower(value)
}


public struct QubitState {
    public var id: String
    public var amplitudeReal: Double
    public var amplitudeImaginary: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, amplitudeReal: Double, amplitudeImaginary: Double) {
        self.id = id
        self.amplitudeReal = amplitudeReal
        self.amplitudeImaginary = amplitudeImaginary
    }
}



extension QubitState: Equatable, Hashable {
    public static func ==(lhs: QubitState, rhs: QubitState) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.amplitudeReal != rhs.amplitudeReal {
            return false
        }
        if lhs.amplitudeImaginary != rhs.amplitudeImaginary {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(amplitudeReal)
        hasher.combine(amplitudeImaginary)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQubitState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QubitState {
        return
            try QubitState(
                id: FfiConverterString.read(from: &buf), 
                amplitudeReal: FfiConverterDouble.read(from: &buf), 
                amplitudeImaginary: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: QubitState, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterDouble.write(value.amplitudeReal, into: &buf)
        FfiConverterDouble.write(value.amplitudeImaginary, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQubitState_lift(_ buf: RustBuffer) throws -> QubitState {
    return try FfiConverterTypeQubitState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQubitState_lower(_ value: QubitState) -> RustBuffer {
    return FfiConverterTypeQubitState.lower(value)
}


public struct Register {
    public var qId: UInt64
    public var registerType: UInt64
    public var cId: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(qId: UInt64, registerType: UInt64, cId: UInt64?) {
        self.qId = qId
        self.registerType = registerType
        self.cId = cId
    }
}



extension Register: Equatable, Hashable {
    public static func ==(lhs: Register, rhs: Register) -> Bool {
        if lhs.qId != rhs.qId {
            return false
        }
        if lhs.registerType != rhs.registerType {
            return false
        }
        if lhs.cId != rhs.cId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(qId)
        hasher.combine(registerType)
        hasher.combine(cId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRegister: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Register {
        return
            try Register(
                qId: FfiConverterUInt64.read(from: &buf), 
                registerType: FfiConverterUInt64.read(from: &buf), 
                cId: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Register, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.qId, into: &buf)
        FfiConverterUInt64.write(value.registerType, into: &buf)
        FfiConverterOptionUInt64.write(value.cId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRegister_lift(_ buf: RustBuffer) throws -> Register {
    return try FfiConverterTypeRegister.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRegister_lower(_ value: Register) -> RustBuffer {
    return FfiConverterTypeRegister.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum QasmResetBehavior {
    
    case supported
    case ignored
    case error
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQasmResetBehavior: FfiConverterRustBuffer {
    typealias SwiftType = QasmResetBehavior

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QasmResetBehavior {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .supported
        
        case 2: return .ignored
        
        case 3: return .error
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: QasmResetBehavior, into buf: inout [UInt8]) {
        switch value {
        
        
        case .supported:
            writeInt(&buf, Int32(1))
        
        
        case .ignored:
            writeInt(&buf, Int32(2))
        
        
        case .error:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQasmResetBehavior_lift(_ buf: RustBuffer) throws -> QasmResetBehavior {
    return try FfiConverterTypeQasmResetBehavior.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeQasmResetBehavior_lower(_ value: QasmResetBehavior) -> RustBuffer {
    return FfiConverterTypeQasmResetBehavior.lower(value)
}



extension QasmResetBehavior: Equatable, Hashable {}




public enum QsError {

    
    
    case ErrorMessage(errorText: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeQsError: FfiConverterRustBuffer {
    typealias SwiftType = QsError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QsError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ErrorMessage(
            errorText: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: QsError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ErrorMessage(errorText):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorText, into: &buf)
            
        }
    }
}


extension QsError: Equatable, Hashable {}

extension QsError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeExecutionState: FfiConverterRustBuffer {
    typealias SwiftType = [ExecutionState]

    public static func write(_ value: [ExecutionState], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeExecutionState.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ExecutionState] {
        let len: Int32 = try readInt(&buf)
        var seq = [ExecutionState]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeExecutionState.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeOperation: FfiConverterRustBuffer {
    typealias SwiftType = [Operation]

    public static func write(_ value: [Operation], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOperation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Operation] {
        let len: Int32 = try readInt(&buf)
        var seq = [Operation]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOperation.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeQubit: FfiConverterRustBuffer {
    typealias SwiftType = [Qubit]

    public static func write(_ value: [Qubit], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeQubit.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Qubit] {
        let len: Int32 = try readInt(&buf)
        var seq = [Qubit]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeQubit.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeQubitState: FfiConverterRustBuffer {
    typealias SwiftType = [QubitState]

    public static func write(_ value: [QubitState], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeQubitState.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [QubitState] {
        let len: Int32 = try readInt(&buf)
        var seq = [QubitState]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeQubitState.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRegister: FfiConverterRustBuffer {
    typealias SwiftType = [Register]

    public static func write(_ value: [Register], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRegister.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Register] {
        let len: Int32 = try readInt(&buf)
        var seq = [Register]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRegister.read(from: &buf))
        }
        return seq
    }
}
public func circuit(source: String)throws  -> Circuit {
    return try  FfiConverterTypeCircuit.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_circuit(
        FfiConverterString.lower(source),$0
    )
})
}
public func estimate(source: String, jobParams: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_estimate(
        FfiConverterString.lower(source),
        FfiConverterOptionString.lower(jobParams),$0
    )
})
}
public func estimateExpression(expression: String, jobParams: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_estimate_expression(
        FfiConverterString.lower(expression),
        FfiConverterOptionString.lower(jobParams),$0
    )
})
}
public func qasm2(source: String, generationOptions: QasmGenerationOptions)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_qasm2(
        FfiConverterString.lower(source),
        FfiConverterTypeQasmGenerationOptions.lower(generationOptions),$0
    )
})
}
public func qasm2Expression(expression: String, generationOptions: QasmGenerationOptions)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_qasm2_expression(
        FfiConverterString.lower(expression),
        FfiConverterTypeQasmGenerationOptions.lower(generationOptions),$0
    )
})
}
public func qir(expression: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_qir(
        FfiConverterString.lower(expression),$0
    )
})
}
public func runQs(source: String)throws  -> ExecutionState {
    return try  FfiConverterTypeExecutionState.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_run_qs(
        FfiConverterString.lower(source),$0
    )
})
}
public func runQsWithOptions(source: String, options: ExecutionOptions)throws  -> [ExecutionState] {
    return try  FfiConverterSequenceTypeExecutionState.lift(try rustCallWithError(FfiConverterTypeQsError.lift) {
    uniffi_qsharp_bridge_fn_func_run_qs_with_options(
        FfiConverterString.lower(source),
        FfiConverterTypeExecutionOptions.lower(options),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_qsharp_bridge_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_circuit() != 48498) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_estimate() != 18557) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_estimate_expression() != 47282) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_qasm2() != 51036) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_qasm2_expression() != 46216) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_qir() != 29669) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_run_qs() != 32241) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_func_run_qs_with_options() != 15428) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_constructor_executionoptions_from_noise() != 17683) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_constructor_executionoptions_from_shots() != 17042) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_qsharp_bridge_checksum_constructor_executionoptions_new() != 25227) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all